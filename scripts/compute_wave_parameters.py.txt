def compute_wave_parameters(station,year_range,shore_rotation_deg_CC):

    ''' This function computes time averaged wave parameters including 
    A (asymmetry index), U (fraction approaching from unstable angles),
    Hs (mean significant wave height), Dir (mean wave direction), and 
    Tp (mean wave period). Inputs include a station number (int), a year
    range (2 value tuple) and shoreline rotation angle in degrees, oriented
    counter clockwise'''
    
    # get wave data from buoy station
    year = np.NAN
    H = bp.historic_data(station,year,year_range)
    X = H.get_all_stand_meteo()

    # get rid of missing data
    X.mask((X==99.0) | (X==9999.0), inplace=True)

    Hs = np.mean(X.WVHT)
    Tp = np.mean(X.DPD)
    [Dir,count] = stats.mode(X.MWD, keepdims=False, nan_policy='omit') 
    
    # Sort data into 4 directional bins a la Ashton et al. 
    #convert the wave direction data to numpy array and drop NaN values 
    rawdirs = X.MWD.dropna().to_numpy()

    #reorient the raw wave direction data to be relative to shore normal
    shore_normal_dirs = rawdirs+shore_rotation_deg_CC
    shore_normal_dirs[shore_normal_dirs>360] = shore_normal_dirs[shore_normal_dirs>360] - 360

    #remove bad directional data 
    bad_dir_inds = np.where((shore_normal_dirs > 90) & (shore_normal_dirs < 270))
    bad_dir_inds = bad_dir_inds[0]
    shore_normal_dirs = np.delete(shore_normal_dirs,bad_dir_inds)
    print(shore_normal_dirs.size)

    #compute the fraction of waves that approach from unstable angles
    unstable_inds = np.where((shore_normal_dirs <= 315) & (shore_normal_dirs >= 30))
    unstable_inds = unstable_inds[0]
    U = unstable_inds.size / shore_normal_dirs.size

    #compute the asymmetry index
    left_wave_inds = np.where(shore_normal_dirs<=180)
    left_wave_inds = left_wave_inds[0]
    A = left_wave_inds.size / shore_normal_dirs.size

    return Hs,Tp,Dir,A,U